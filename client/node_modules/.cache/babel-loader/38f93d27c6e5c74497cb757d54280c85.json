{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js\";\nimport React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      console.log(\"solve\");\n    };\n\n    this.stop = () => {\n      console.log(\"stop\");\n    };\n\n    this.newGame = () => {\n      this.createFullGrid();\n    };\n\n    this.deleteGame = () => {\n      console.log(\"delete game\");\n    };\n\n    this.goBack = () => {\n      console.log(\"go back\");\n    };\n\n    this.handleChange = (e, rowIndex, colIndex) => {\n      const value = parseInt(e.target.value);\n\n      if (e.target.value > 0 && e.target.value <= 9) {\n        this.setState(prevState => {\n          const currentGrid = prevState.cellValues;\n          currentGrid[rowIndex][colIndex] = value;\n          return {\n            cellValues: currentGrid\n          };\n        });\n      }\n    };\n\n    this.shuffle = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n    };\n\n    this.isInRow = ({\n      grid,\n      row,\n      value\n    }) => {\n      if (grid[row].includes(value)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.isInCol = ({\n      grid,\n      col,\n      value\n    }) => {\n      for (let i = 0; i < 9; i++) {\n        if (grid[i][col] === value) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.identifyWorkingSquare = ({\n      grid,\n      row,\n      col\n    }) => {\n      const square = [];\n\n      if (row < 3) {\n        if (col < 3) {\n          for (let i = 0; i < 3; i++) {\n            square.push([grid[i][0], grid[i][1], grid[i][2]]);\n          }\n        } else if (col < 6) {\n          for (let i = 0; i < 3; i++) {\n            square.push([grid[i][3], grid[i][4], grid[i][5]]);\n          }\n        } else {\n          for (let i = 0; i < 3; i++) {\n            square.push([grid[i][6], grid[i][7], grid[i][8]]);\n          }\n        }\n      } else if (row < 6) {\n        if (col < 3) {\n          for (let i = 3; i < 6; i++) {\n            square.push([grid[i][0], grid[i][1], grid[i][2]]);\n          }\n        } else if (col < 6) {\n          for (let i = 3; i < 6; i++) {\n            square.push([grid[i][3], grid[i][4], grid[i][5]]);\n          }\n        } else {\n          for (let i = 3; i < 6; i++) {\n            square.push([grid[i][6], grid[i][7], grid[i][8]]);\n          }\n        }\n      } else {\n        if (col < 3) {\n          for (let i = 6; i < 9; i++) {\n            square.push([grid[i][0], grid[i][1], grid[i][2]]);\n          }\n        } else if (col < 6) {\n          for (let i = 6; i < 9; i++) {\n            square.push([grid[i][3], grid[i][4], grid[i][5]]);\n          }\n        } else {\n          for (let i = 6; i < 9; i++) {\n            square.push([grid[i][6], grid[i][7], grid[i][8]]);\n          }\n        }\n      }\n\n      return square;\n    };\n\n    this.isInSquare = ({\n      square,\n      number\n    }) => {\n      return [...square[0], ...square[1], ...square[2]].includes(number);\n    };\n\n    this.checkGrid = grid => {\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          if (grid[i][j] === 0) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    };\n\n    this.fillGrid = grid => {\n      const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n      for (let i = 0; i < 81; i++) {\n        let row = Math.floor(i / 9);\n        let col = i % 9;\n\n        if (grid[row][col] === 0) {\n          this.shuffle(numbers);\n          numbers.forEach(number => {\n            // Is it not in grid row\n            if (!this.isInRow({\n              grid,\n              row,\n              number\n            })) {\n              //Is it not in grid col\n              if (!this.isInCol({\n                grid,\n                col,\n                number\n              })) {\n                const square = this.identifyWorkingSquare({\n                  grid,\n                  row,\n                  col\n                });\n\n                if (!this.isInSquare({\n                  square,\n                  number\n                })) {\n                  grid[row][col] = number;\n                }\n              }\n            }\n          });\n        }\n      }\n    };\n\n    this.createFullGrid = () => {\n      const grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n      this.fillGrid(grid);\n      return grid;\n    };\n\n    this.getRandomIndex = () => {\n      return Math.floor(Math.random() * 9);\n    };\n\n    this.state = {\n      cellValues: this.createFullGrid()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  removeNumbers(grid, attempts = 5) {\n    while (attempts > 0) {\n      let row = this.getRandomIndex();\n      let col = this.getRandomIndex();\n    }\n\n    return grid;\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"app-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tools, {\n      solve: this.solve,\n      stop: this.stop,\n      newGame: this.newGame,\n      deleteGame: this.deleteGame,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Board, {\n      cellValues: this.state.cellValues,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js"],"names":["React","Banner","Tools","Board","Footer","App","Component","constructor","props","solve","console","log","stop","newGame","createFullGrid","deleteGame","goBack","handleChange","e","rowIndex","colIndex","value","parseInt","target","setState","prevState","currentGrid","cellValues","shuffle","array","i","length","j","Math","floor","random","isInRow","grid","row","includes","isInCol","col","identifyWorkingSquare","square","push","isInSquare","number","checkGrid","fillGrid","numbers","forEach","getRandomIndex","state","bind","removeNumbers","attempts","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\n\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cellValues: this.createFullGrid()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  solve = () => {\n    console.log(\"solve\");\n  };\n  stop = () => {\n    console.log(\"stop\");\n  };\n  newGame = () => {\n    this.createFullGrid();\n  };\n  deleteGame = () => {\n    console.log(\"delete game\");\n  };\n \n  goBack = () => {\n    console.log(\"go back\");\n  };\n  handleChange = (e, rowIndex, colIndex) => {\n    const value = parseInt(e.target.value);\n    if (e.target.value > 0 && e.target.value <= 9) {\n      this.setState(prevState => {\n        const currentGrid = prevState.cellValues;\n        currentGrid[rowIndex][colIndex] = value;\n        return {\n          cellValues: currentGrid\n        };\n      });\n    }\n  };\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n  isInRow = ({ grid, row, value }) => {\n    if (grid[row].includes(value)) {\n      return true;\n    }\n    return false;\n  };\n  isInCol = ({ grid, col, value }) => {\n    for (let i = 0; i < 9; i++) {\n      if (grid[i][col] === value) {\n        return true;\n      }\n    }\n    return false;\n  };\n  identifyWorkingSquare = ({ grid, row, col }) => {\n    const square = [];\n    if (row < 3) {\n      if (col < 3) {\n        for (let i = 0; i < 3; i++) {\n          square.push([grid[i][0], grid[i][1], grid[i][2]]);\n        }\n      } else if (col < 6) {\n        for (let i = 0; i < 3; i++) {\n          square.push([grid[i][3], grid[i][4], grid[i][5]]);\n        }\n      } else {\n        for (let i = 0; i < 3; i++) {\n          square.push([grid[i][6], grid[i][7], grid[i][8]]);\n        }\n      }\n    } else if (row < 6) {\n      if (col < 3) {\n        for (let i = 3; i < 6; i++) {\n          square.push([grid[i][0], grid[i][1], grid[i][2]]);\n        }\n      } else if (col < 6) {\n        for (let i = 3; i < 6; i++) {\n          square.push([grid[i][3], grid[i][4], grid[i][5]]);\n        }\n      } else {\n        for (let i = 3; i < 6; i++) {\n          square.push([grid[i][6], grid[i][7], grid[i][8]]);\n        }\n      }\n    } else {\n      if (col < 3) {\n        for (let i = 6; i < 9; i++) {\n          square.push([grid[i][0], grid[i][1], grid[i][2]]);\n        }\n      } else if (col < 6) {\n        for (let i = 6; i < 9; i++) {\n          square.push([grid[i][3], grid[i][4], grid[i][5]]);\n        }\n      } else {\n        for (let i = 6; i < 9; i++) {\n          square.push([grid[i][6], grid[i][7], grid[i][8]]);\n        }\n      }\n    }\n    return square;\n  };\n  isInSquare = ({ square, number }) => {\n    return [...square[0], ...square[1], ...square[2]].includes(number);\n  };\n  // check if grid is full (non-zero values)\n  checkGrid = grid => {\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (grid[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  fillGrid = grid => {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    for (let i = 0; i < 81; i++) {\n      let row = Math.floor(i / 9);\n      let col = i % 9;\n\n      if (grid[row][col] === 0) {\n        this.shuffle(numbers);\n\n        numbers.forEach(number => {\n          // Is it not in grid row\n          if (!this.isInRow({ grid, row, number })) {\n            //Is it not in grid col\n            if (!this.isInCol({ grid, col, number })) {\n              const square = this.identifyWorkingSquare({ grid, row, col });\n              if (!this.isInSquare({ square, number })) {\n                grid[row][col] = number;\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  createFullGrid = () => {\n    const grid = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ];\n    this.fillGrid(grid);\n\n    return grid;\n  };\n  getRandomIndex = () => {\n    return Math.floor(Math.random() * 9)\n  }\n  removeNumbers(grid, attempts = 5) {\n    while (attempts > 0) {\n      let row = this.getRandomIndex()\n      let col = this.getRandomIndex()\n    }\n    return grid\n  }\n  \n  componentDidMount() {}\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Banner />\n        <section className=\"app-body\">\n          <Tools\n            solve={this.solve}\n            stop={this.stop}\n            newGame={this.newGame}\n            deleteGame={this.deleteGame}\n            goBack={this.goBack}\n          />\n          <Board\n            cellValues={this.state.cellValues}\n            handleChange={this.handleChange}\n          />\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js\";\nimport React from \"react\";\nimport \"../styles/BoardRow.css\";\n\nconst BoardRow = props => {\n  const {\n    cellValues,\n    activeCells,\n    rowIndex,\n    handleChange,\n    setActiveCells\n  } = props;\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = row === activeCells[0] && column === activeCells[1] ? true : false;\n    if (row === activeCells[0] && !isSameAsActive) return true;\n    if (column === activeCells[1] && !isSameAsActive) return true;\n    return false;\n  }; // Setting border classnames \n  // columns\n\n\n  const isLeftColBorder = col => {\n    if (col === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isRightColBorder = col => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, columns.map(element => {\n    const colIndex = element - 1;\n    const cellValue = getValue(rowIndex, colIndex);\n    const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : '';\n    const borderClasses = '';\n    if (isLeftColBorder(colIndex)) borderClasses += 'grid-border-left';\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: element,\n      className: `square-cell ${borderClasses}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: cellValue,\n      onClick: e => setActiveCells(rowIndex, colIndex),\n      onChange: e => handleChange(e, rowIndex, colIndex),\n      className: `square-input ${inPlay}`,\n      maxLength: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nexport default BoardRow;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js"],"names":["React","BoardRow","props","cellValues","activeCells","rowIndex","handleChange","setActiveCells","columns","getValue","row","column","isInPlay","isSameAsActive","isLeftColBorder","col","isRightColBorder","map","element","colIndex","cellValue","inPlay","borderClasses","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA,QAA3B;AAAqCC,IAAAA,YAArC;AAAmDC,IAAAA;AAAnD,MAAsEL,KAA5E;AACA,QAAMM,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAhB;;AACA,QAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAChC,WAAOR,UAAU,CAACO,GAAD,CAAV,CAAgBC,MAAhB,CAAP;AACD,GAFD;;AAGA,QAAMC,QAAQ,GAAG,CAACR,WAAD,EAAcM,GAAd,EAAmBC,MAAnB,KAA8B;AAC7C,UAAME,cAAc,GAAIH,GAAG,KAAKN,WAAW,CAAC,CAAD,CAAnB,IAA0BO,MAAM,KAAKP,WAAW,CAAC,CAAD,CAAjD,GAAwD,IAAxD,GAA+D,KAAtF;AACA,QAAIM,GAAG,KAAKN,WAAW,CAAC,CAAD,CAAnB,IAA0B,CAACS,cAA/B,EAAgD,OAAO,IAAP;AAChD,QAAIF,MAAM,KAAKP,WAAW,CAAC,CAAD,CAAtB,IAA6B,CAACS,cAAlC,EAAkD,OAAO,IAAP;AAClD,WAAO,KAAP;AACD,GALD,CANwB,CAaxB;AACA;;;AACA,QAAMC,eAAe,GAAIC,GAAD,IAAS;AAC/B,QAAIA,GAAG,KAAK,CAAZ,EAAe;AACb,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GALD;;AAMA,QAAMC,gBAAgB,GAAID,GAAD,IAAS;AAChC,QAAIA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAArB,IAA0BA,GAAG,KAAK,CAAtC,EAAyC;AACvC,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GALD;;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,OAAO,CAACS,GAAR,CAAYC,OAAO,IAAI;AACtB,UAAMC,QAAQ,GAAGD,OAAO,GAAG,CAA3B;AACA,UAAME,SAAS,GAAGX,QAAQ,CAACJ,QAAD,EAAWc,QAAX,CAA1B;AACA,UAAME,MAAM,GAAGT,QAAQ,CAACR,WAAD,EAAcC,QAAd,EAAwBc,QAAxB,CAAR,GAA4C,QAA5C,GAAuD,EAAtE;AACA,UAAMG,aAAa,GAAG,EAAtB;AACA,QAAIR,eAAe,CAACK,QAAD,CAAnB,EAA+BG,aAAa,IAAI,kBAAjB;AAE/B,wBACE;AAAI,MAAA,GAAG,EAAEJ,OAAT;AAAkB,MAAA,SAAS,EAAG,eAAcI,aAAc,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEF,SAFT;AAGE,MAAA,OAAO,EAAEG,CAAC,IAAIhB,cAAc,CAACF,QAAD,EAAWc,QAAX,CAH9B;AAIE,MAAA,QAAQ,EAAEI,CAAC,IAAIjB,YAAY,CAACiB,CAAD,EAAIlB,QAAJ,EAAcc,QAAd,CAJ7B;AAKE,MAAA,SAAS,EAAG,gBAAeE,MAAO,EALpC;AAME,MAAA,SAAS,EAAC,GANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAYD,GAnBA,CADH,CADF;AAwBD,CApDD;;AAsDA,eAAepB,QAAf","sourcesContent":["import React from \"react\";\nimport \"../styles/BoardRow.css\";\n\nconst BoardRow = props => {\n  const { cellValues, activeCells, rowIndex, handleChange, setActiveCells } = props;\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = (row === activeCells[0] && column === activeCells[1]) ? true : false\n    if (row === activeCells[0] && !isSameAsActive ) return true\n    if (column === activeCells[1] && !isSameAsActive) return true\n    return false\n  }\n\n  // Setting border classnames \n  // columns\n  const isLeftColBorder = (col) => {\n    if (col === 0) {\n      return true\n    }\n    return false\n  }\n  const isRightColBorder = (col) => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <tr>\n      {columns.map(element => {\n        const colIndex = element - 1;\n        const cellValue = getValue(rowIndex, colIndex);\n        const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : ''\n        const borderClasses = ''\n        if (isLeftColBorder(colIndex)) borderClasses += 'grid-border-left'\n\n        return (\n          <td key={element} className={`square-cell ${borderClasses}`}>\n            <input\n              type=\"text\"\n              value={cellValue}\n              onClick={e => setActiveCells(rowIndex, colIndex)}\n              onChange={e => handleChange(e, rowIndex, colIndex)}\n              className={`square-input ${inPlay}`}\n              maxLength='1'\n            />\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nexport default BoardRow;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js\";\nimport React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport InfoBox from \"./InfoBox\";\nimport createFullGrid from \"../utils/createFullGrid/createFullGrid\";\nimport copyGrid from \"../utils/copyGrid/copyGrid\";\nimport removeNumbers from \"../utils/removeNumbers/removeNumbers\";\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      console.log(\"solve\");\n    };\n\n    this.stop = () => {\n      console.log(\"stop\");\n    };\n\n    this.newGame = () => {\n      this.createNewGame(this.state.difficulty);\n    };\n\n    this.deleteGame = () => {\n      console.log(\"delete game\");\n    };\n\n    this.goBack = () => {\n      console.log(\"go back\");\n    };\n\n    this.setDifficulty = e => {\n      const value = parseInt(e.target.value);\n      this.setState(() => {\n        return {\n          difficulty: value\n        };\n      });\n    };\n\n    this.changeFeedbackToggle = e => {\n      const value = e.target.value === 'yes' ? true : false;\n      this.setState(state => {\n        if (state.feedback !== value) return {\n          feedback: value\n        };\n      });\n    };\n\n    this.handleChange = (e, rowIndex, colIndex) => {\n      const solvedGrid = this.state.solvedCellValues;\n\n      if (this.state.cellValues.length === 0 || this.state.solvedCellValues.length === 0) {\n        alert(\"Please start the game\");\n        return this.state;\n      }\n\n      const value = parseInt(e.target.value);\n\n      if (isNaN(value)) {\n        alert(\"You must enter a valid whole number between 0 and 9\");\n        return this.state;\n      }\n\n      if (solvedGrid[rowIndex][colIndex] !== value) {\n        alert(\"incorrect\");\n        return this.state;\n      }\n\n      this.setState(prevState => {\n        const currentGrid = prevState.cellValues;\n        currentGrid[rowIndex][colIndex] = value;\n        return {\n          cellValues: currentGrid\n        };\n      });\n      return this.state;\n    };\n\n    this.createNewGame = difficulty => {\n      const solvedGrid = createFullGrid();\n      const solvedGridCopy = copyGrid(solvedGrid);\n      const challengeGrid = removeNumbers(solvedGridCopy, difficulty);\n      this.setState(state => {\n        return {\n          cellValues: challengeGrid,\n          solvedCellValues: solvedGrid\n        };\n      });\n    };\n\n    this.state = {\n      activeCells: [],\n      difficulty: 5,\n      feedback: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n\n  componentDidUpdate() {}\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"app-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tools, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Board, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InfoBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js"],"names":["React","Banner","Tools","Board","Footer","InfoBox","createFullGrid","copyGrid","removeNumbers","App","Component","constructor","props","solve","console","log","stop","newGame","createNewGame","state","difficulty","deleteGame","goBack","setDifficulty","e","value","parseInt","target","setState","changeFeedbackToggle","feedback","handleChange","rowIndex","colIndex","solvedGrid","solvedCellValues","cellValues","length","alert","isNaN","prevState","currentGrid","solvedGridCopy","challengeGrid","activeCells","bind","componentDidUpdate","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport InfoBox from \"./InfoBox\";\n\nimport createFullGrid from \"../utils/createFullGrid/createFullGrid\";\nimport copyGrid from \"../utils/copyGrid/copyGrid\";\nimport removeNumbers from \"../utils/removeNumbers/removeNumbers\";\n\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      activeCells: [],\n      difficulty: 5,\n      feedback: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n  solve = () => {\n    console.log(\"solve\");\n  };\n  stop = () => {\n    console.log(\"stop\");\n  };\n  newGame = () => {\n    this.createNewGame(this.state.difficulty);\n  };\n  deleteGame = () => {\n    console.log(\"delete game\");\n  };\n  goBack = () => {\n    console.log(\"go back\");\n  };\n\n  setDifficulty = (e) => {\n    const value = parseInt(e.target.value);\n\n    this.setState(() => {\n      return {\n        difficulty: value,\n      };\n    });\n  };\n  changeFeedbackToggle = (e) => {\n    const value = e.target.value === 'yes' ? true : false\n    \n    this.setState((state) => {\n      if (state.feedback !== value )\n      return {\n        feedback: value\n      }\n    })\n  }\n\n  handleChange = (e, rowIndex, colIndex) => {\n    const solvedGrid = this.state.solvedCellValues;\n    if (\n      this.state.cellValues.length === 0 ||\n      this.state.solvedCellValues.length === 0\n    ) {\n      alert(\"Please start the game\");\n      return this.state;\n    }\n    const value = parseInt(e.target.value);\n    if (isNaN(value)) {\n      alert(\"You must enter a valid whole number between 0 and 9\");\n      return this.state;\n    }\n    if (solvedGrid[rowIndex][colIndex] !== value) {\n      alert(\"incorrect\");\n      return this.state;\n    }\n    this.setState((prevState) => {\n      const currentGrid = prevState.cellValues;\n      currentGrid[rowIndex][colIndex] = value;\n      return {\n        cellValues: currentGrid,\n      };\n    });\n\n    return this.state;\n  };\n  componentDidUpdate() {}\n  createNewGame = (difficulty) => {\n    const solvedGrid = createFullGrid();\n    const solvedGridCopy = copyGrid(solvedGrid);\n    const challengeGrid = removeNumbers(solvedGridCopy, difficulty);\n\n    this.setState((state) => {\n      return {\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid,\n      };\n    });\n  };\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <div className='app'>\n        <Banner />\n        <section className='app-body'>\n          <Tools\n          />\n          <Board  \n          />\n          <InfoBox\n          />\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
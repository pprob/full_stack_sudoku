{"ast":null,"code":"import shuffle from '../shuffle/shuffle';\nimport isInCol from '../isInCol/isInCol';\nimport isInRow from '../isInRow/isInRow';\nimport identifyWorkingSquare from '../identifyWorkingSquare/identifyWorkingSquare';\nimport isInSquare from '../checkGrid/checkGrid';\n\nfunction fillGrid(grid) {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  for (let i = 0; i < 81; i++) {\n    let row = Math.floor(i / 9);\n    let col = i % 9;\n\n    if (grid[row][col] === 0) {\n      shuffle(numbers);\n\n      for (let number of numbers) {\n        if (!isInRow({\n          grid,\n          row,\n          col\n        })) {\n          if (!isInCol({\n            grid,\n            col,\n            number\n          })) {\n            const square = identifyWorkingSquare({\n              grid,\n              row,\n              col\n            });\n\n            if (!isInSquare({\n              square,\n              number\n            })) {\n              grid[row][col] = number;\n\n              if (checkGrid(grid)) {\n                return true;\n              } else if (fillGrid(grid)) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n  }\n}\n\n;\nexport default fillGrid;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/utils/fillGrid/fillGrid.js"],"names":["shuffle","isInCol","isInRow","identifyWorkingSquare","isInSquare","fillGrid","grid","numbers","i","row","Math","floor","col","number","square","checkGrid"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,qBAAP,MAAkC,gDAAlC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;;AAGA,SAASC,QAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,CAAf,CAAV;AACA,QAAII,GAAG,GAAGJ,CAAC,GAAG,CAAd;;AAEA,QAAIF,IAAI,CAACG,GAAD,CAAJ,CAAUG,GAAV,MAAmB,CAAvB,EAA0B;AACxBZ,MAAAA,OAAO,CAACO,OAAD,CAAP;;AACA,WAAK,IAAIM,MAAT,IAAmBN,OAAnB,EAA4B;AAC1B,YAAI,CAACL,OAAO,CAAC;AAAEI,UAAAA,IAAF;AAAQG,UAAAA,GAAR;AAAaG,UAAAA;AAAb,SAAD,CAAZ,EAAkC;AAChC,cAAI,CAACX,OAAO,CAAC;AAAEK,YAAAA,IAAF;AAAQM,YAAAA,GAAR;AAAaC,YAAAA;AAAb,WAAD,CAAZ,EAAqC;AACnC,kBAAMC,MAAM,GAAGX,qBAAqB,CAAC;AAAEG,cAAAA,IAAF;AAAQG,cAAAA,GAAR;AAAaG,cAAAA;AAAb,aAAD,CAApC;;AACA,gBAAI,CAACR,UAAU,CAAC;AAAEU,cAAAA,MAAF;AAAUD,cAAAA;AAAV,aAAD,CAAf,EAAqC;AACnCP,cAAAA,IAAI,CAACG,GAAD,CAAJ,CAAUG,GAAV,IAAiBC,MAAjB;;AACA,kBAAIE,SAAS,CAACT,IAAD,CAAb,EAAqB;AACnB,uBAAO,IAAP;AACD,eAFD,MAGK,IAAID,QAAQ,CAACC,IAAD,CAAZ,EAAoB;AACvB,uBAAO,IAAP;AACD;AACF;AACF;AACF;AACF;;AACD;AACD;AACF;AACF;;AAAA;AACD,eAAeD,QAAf","sourcesContent":["import shuffle from '../shuffle/shuffle';\nimport isInCol from '../isInCol/isInCol';\nimport isInRow from '../isInRow/isInRow';\nimport identifyWorkingSquare from '../identifyWorkingSquare/identifyWorkingSquare';\nimport isInSquare from '../checkGrid/checkGrid';\n\n\nfunction fillGrid (grid) {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  for (let i = 0; i < 81; i++) {\n    let row = Math.floor(i / 9);\n    let col = i % 9;\n\n    if (grid[row][col] === 0) {\n      shuffle(numbers)\n      for (let number of numbers) {\n        if (!isInRow({ grid, row, col })) {\n          if (!isInCol({ grid, col, number })) {\n            const square = identifyWorkingSquare({ grid, row, col })\n            if (!isInSquare({ square, number })) {\n              grid[row][col] = number\n              if (checkGrid(grid)) {\n                return true\n              }\n              else if (fillGrid(grid)) {\n                return true\n              }\n            }\n          }\n        }\n      }\n      break\n    }\n  }\n};\nexport default fillGrid"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import createFullGrid from '../utils/createFullGrid/createFullGrid';\nimport copyGrid from '../utils/copyGrid/copyGrid';\nimport removeNumbers from '../utils/removeNumbers/removeNumbers';\nconst defaultState = {\n  cellValues: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],\n  solvedCellValues: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],\n  activeCells: [0, 0],\n  difficulty: 5,\n  feedback: true\n};\nexport default ((state = defaultState, action) => {\n  switch (action.type) {\n    case 'CREATE_NEW_GAME':\n      const solvedGrid = createFullGrid();\n      const copyOfSolvedGrid = copyGrid(solvedGrid);\n      const challengeGrid = removeNumbers(copyOfSolvedGrid, state.difficulty);\n      return { ...state,\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid\n      };\n\n    case 'SET_ACTIVE_CELLS':\n      return { ...state,\n        activeCells: action.activeCells\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/redux/appReducer.js"],"names":["createFullGrid","copyGrid","removeNumbers","defaultState","cellValues","solvedCellValues","activeCells","difficulty","feedback","state","action","type","solvedGrid","copyOfSolvedGrid","challengeGrid"],"mappings":"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","sourcesContent":["import createFullGrid from '../utils/createFullGrid/createFullGrid'\nimport copyGrid from '../utils/copyGrid/copyGrid'\nimport removeNumbers from '../utils/removeNumbers/removeNumbers'\n\n\nconst defaultState = {\n  cellValues: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  solvedCellValues: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  activeCells: [0, 0],\n  difficulty: 5,\n  feedback: true,\n}\n\nexport default (state = defaultState, action) => {\n  switch(action.type) {\n    case 'CREATE_NEW_GAME':\n      const solvedGrid = createFullGrid()\n      const copyOfSolvedGrid = copyGrid(solvedGrid)\n      const challengeGrid = removeNumbers(copyOfSolvedGrid, state.difficulty)\n\n      return {\n        ...state,\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid\n      }\n    case 'SET_ACTIVE_CELLS':\n      return {\n        ...state,\n        activeCells: action.activeCells\n      }\n    default: \n      return state\n  }\n}"]},"metadata":{},"sourceType":"module"}
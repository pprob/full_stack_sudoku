{"ast":null,"code":"import shuffle from \"../shuffle/shuffle\";\nimport isInCol from \"../isInCol/isInCol\";\nimport isInRow from \"../isInRow/isInRow\";\nimport identifyWorkingSquare from \"../identifyWorkingSquare/identifyWorkingSquare\";\nimport isInSquare from \"../isInSquare/isInSquare\";\nimport checkGrid from \"../checkGrid/checkGrid\";\nconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfunction fillGrid(grid) {\n  let row = 0;\n  let col = 0;\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9);\n    col = i % 9;\n\n    if (grid[row][col] === 0) {\n      shuffle(nums);\n\n      for (let number in nums) {\n        if (!isInRow({\n          grid,\n          row,\n          number\n        })) {\n          if (!isInCol({\n            grid,\n            col,\n            number\n          })) {\n            const square = identifyWorkingSquare({\n              grid,\n              row,\n              col\n            });\n\n            if (!isInSquare({\n              square,\n              number\n            })) {\n              grid[row][col] = number;\n              if (checkGrid(grid)) return true;else if (fillGrid(grid)) return true;\n            }\n          }\n        }\n      }\n    }\n\n    break;\n  }\n}\n\nexport default fillGrid;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/utils/fillGrid/fillGrid.js"],"names":["shuffle","isInCol","isInRow","identifyWorkingSquare","isInSquare","checkGrid","nums","fillGrid","grid","row","col","i","Math","floor","number","square"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,qBAAP,MAAkC,gDAAlC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,MAAMC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAb;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BF,IAAAA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,CAAf,CAAN;AACAD,IAAAA,GAAG,GAAGC,CAAC,GAAG,CAAV;;AAEA,QAAIH,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,MAAmB,CAAvB,EAA0B;AACxBV,MAAAA,OAAO,CAACM,IAAD,CAAP;;AAEA,WAAK,IAAIQ,MAAT,IAAmBR,IAAnB,EAAyB;AACvB,YAAI,CAACJ,OAAO,CAAC;AAAEM,UAAAA,IAAF;AAAQC,UAAAA,GAAR;AAAaK,UAAAA;AAAb,SAAD,CAAZ,EAAqC;AACnC,cAAI,CAACb,OAAO,CAAC;AAAEO,YAAAA,IAAF;AAAQE,YAAAA,GAAR;AAAaI,YAAAA;AAAb,WAAD,CAAZ,EAAqC;AACnC,kBAAMC,MAAM,GAAGZ,qBAAqB,CAAC;AAAEK,cAAAA,IAAF;AAAQC,cAAAA,GAAR;AAAaC,cAAAA;AAAb,aAAD,CAApC;;AACA,gBAAI,CAACN,UAAU,CAAC;AAAEW,cAAAA,MAAF;AAAUD,cAAAA;AAAV,aAAD,CAAf,EAAqC;AACnCN,cAAAA,IAAI,CAACC,GAAD,CAAJ,CAAUC,GAAV,IAAiBI,MAAjB;AACA,kBAAIT,SAAS,CAACG,IAAD,CAAb,EAAqB,OAAO,IAAP,CAArB,KACK,IAAID,QAAQ,CAACC,IAAD,CAAZ,EAAoB,OAAO,IAAP;AAC1B;AACF;AACF;AACF;AACF;;AACD;AACD;AACF;;AAED,eAAeD,QAAf","sourcesContent":["import shuffle from \"../shuffle/shuffle\";\nimport isInCol from \"../isInCol/isInCol\";\nimport isInRow from \"../isInRow/isInRow\";\nimport identifyWorkingSquare from \"../identifyWorkingSquare/identifyWorkingSquare\";\nimport isInSquare from \"../isInSquare/isInSquare\";\nimport checkGrid from \"../checkGrid/checkGrid\";\n\nconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nfunction fillGrid(grid) {\n  let row = 0\n  let col = 0\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9)\n    col = i % 9\n\n    if (grid[row][col] === 0) {\n      shuffle(nums)\n\n      for (let number in nums) {\n        if (!isInRow({ grid, row, number })) {\n          if (!isInCol({ grid, col, number })) {\n            const square = identifyWorkingSquare({ grid, row, col })\n            if (!isInSquare({ square, number })) {\n              grid[row][col] = number\n              if (checkGrid(grid)) return true\n              else if (fillGrid(grid)) return true\n            }\n          }\n        }\n      }\n    }\n    break\n  }\n}\n\nexport default fillGrid;\n"]},"metadata":{},"sourceType":"module"}
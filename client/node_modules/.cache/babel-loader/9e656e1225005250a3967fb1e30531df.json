{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js\";\nimport React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport InfoBox from \"./InfoBox\";\nimport createFullGrid from \"../utils/createFullGrid/createFullGrid\";\nimport copyGrid from \"../utils/copyGrid/copyGrid\";\nimport removeNumbers from \"../utils/removeNumbers/removeNumbers\";\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      console.log(\"solve\");\n    };\n\n    this.stop = () => {\n      console.log(\"stop\");\n    };\n\n    this.newGame = () => {\n      this.createNewGame(this.state.difficulty);\n    };\n\n    this.deleteGame = () => {\n      console.log(\"delete game\");\n    };\n\n    this.goBack = () => {\n      console.log(\"go back\");\n    };\n\n    this.setActiveCells = (row, col) => {\n      const activeCells = [];\n      activeCells.push(row, col);\n      this.setState(state => {\n        return {\n          activeCells\n        };\n      });\n    };\n\n    this.setDifficulty = e => {\n      const value = parseInt(e.target.value);\n      this.setState(() => {\n        return {\n          difficulty: value\n        };\n      });\n    };\n\n    this.handleChange = (e, rowIndex, colIndex) => {\n      const solvedGrid = this.state.solvedCellValues;\n\n      if (this.state.cellValues.length === 0 || this.state.solvedCellValues.length === 0) {\n        alert(\"Please start the game\");\n        return this.state;\n      }\n\n      const value = parseInt(e.target.value);\n\n      if (isNaN(value)) {\n        alert(\"You must enter a valid whole number between 0 and 9\");\n        return this.state;\n      }\n\n      if (solvedGrid[rowIndex][colIndex] !== value) {\n        alert('incorrect');\n        return this.state;\n      }\n\n      this.setState(prevState => {\n        const currentGrid = prevState.cellValues;\n        currentGrid[rowIndex][colIndex] = value;\n        return {\n          cellValues: currentGrid\n        };\n      });\n      return this.state;\n    };\n\n    this.createNewGame = difficulty => {\n      const solvedGrid = createFullGrid();\n      const solvedGridCopy = copyGrid(solvedGrid);\n      const challengeGrid = removeNumbers(solvedGridCopy, difficulty);\n      this.setState(state => {\n        return {\n          cellValues: challengeGrid,\n          solvedCellValues: solvedGrid\n        };\n      });\n    };\n\n    this.state = {\n      cellValues: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],\n      solvedCellValues: [],\n      activeCells: [],\n      difficulty: 5,\n      feedback: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n\n  componentDidUpdate() {}\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"app-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tools, {\n      solve: this.solve,\n      stop: this.stop,\n      newGame: this.newGame,\n      deleteGame: this.deleteGame,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Board, {\n      cellValues: this.state.cellValues,\n      activeCells: this.state.activeCells,\n      handleChange: this.handleChange,\n      setActiveCells: this.setActiveCells,\n      solvedCellValues: this.state.solvedCellValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InfoBox, {\n      setDifficulty: this.setDifficulty,\n      difficulty: this.state.difficulty,\n      feedback: this.state.feedback,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js"],"names":["React","Banner","Tools","Board","Footer","InfoBox","createFullGrid","copyGrid","removeNumbers","App","Component","constructor","props","solve","console","log","stop","newGame","createNewGame","state","difficulty","deleteGame","goBack","setActiveCells","row","col","activeCells","push","setState","setDifficulty","e","value","parseInt","target","handleChange","rowIndex","colIndex","solvedGrid","solvedCellValues","cellValues","length","alert","isNaN","prevState","currentGrid","solvedGridCopy","challengeGrid","feedback","bind","componentDidUpdate","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport InfoBox from \"./InfoBox\";\n\nimport createFullGrid from \"../utils/createFullGrid/createFullGrid\";\nimport copyGrid from \"../utils/copyGrid/copyGrid\";\nimport removeNumbers from \"../utils/removeNumbers/removeNumbers\";\n\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cellValues: [\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      ],\n      solvedCellValues: [],\n      activeCells: [],\n      difficulty: 5,\n      feedback: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n  solve = () => {\n    console.log(\"solve\");\n  };\n  stop = () => {\n    console.log(\"stop\");\n  };\n  newGame = () => {\n    this.createNewGame(this.state.difficulty);\n  };\n  deleteGame = () => {\n    console.log(\"delete game\");\n  };\n  goBack = () => {\n    console.log(\"go back\");\n  };\n  setActiveCells = (row, col) => {\n    const activeCells = [];\n    activeCells.push(row, col);\n    this.setState((state) => {\n      return {\n        activeCells,\n      };\n    });\n  };\n\n  setDifficulty = (e) => {\n    const value = parseInt(e.target.value)\n\n    this.setState(() => {\n      return {\n        difficulty: value\n      }\n    })\n  }\n\n  handleChange = (e, rowIndex, colIndex) => {\n    const solvedGrid = this.state.solvedCellValues\n    if (\n      this.state.cellValues.length === 0 ||\n      this.state.solvedCellValues.length === 0\n    ) {\n      alert(\"Please start the game\");\n      return this.state;\n    }\n    const value = parseInt(e.target.value);\n    if (isNaN(value)) {\n      alert(\"You must enter a valid whole number between 0 and 9\");\n      return this.state;\n    }\n    if (solvedGrid[rowIndex][colIndex] !== value) {\n      alert('incorrect')\n      return this.state\n    }\n    this.setState((prevState) => {\n      const currentGrid = prevState.cellValues;\n      currentGrid[rowIndex][colIndex] = value;\n      return {\n        cellValues: currentGrid,\n      };\n    });\n\n    return this.state;\n  };\n  componentDidUpdate() { }\n  createNewGame = (difficulty) => {\n    const solvedGrid = createFullGrid();\n    const solvedGridCopy = copyGrid(solvedGrid);\n    const challengeGrid = removeNumbers(solvedGridCopy, difficulty);\n\n    this.setState((state) => {\n      return {\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid,\n      };\n    });\n  };\n\n  componentDidMount() { }\n\n  render() {\n    return (\n      <div className='app'>\n        <Banner />\n        <section className='app-body'>\n          <Tools\n            solve={this.solve}\n            stop={this.stop}\n            newGame={this.newGame}\n            deleteGame={this.deleteGame}\n            goBack={this.goBack}\n          />\n          <Board\n            cellValues={this.state.cellValues}\n            activeCells={this.state.activeCells}\n            handleChange={this.handleChange}\n            setActiveCells={this.setActiveCells}\n            solvedCellValues={this.state.solvedCellValues}\n          />\n          <InfoBox setDifficulty={this.setDifficulty} difficulty={this.state.difficulty} feedback={this.state.feedback}/>\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
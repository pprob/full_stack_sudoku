{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js\";\nimport React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport createFullGrid from '../utils/createFullGrid/createFullGrid';\nimport copyGrid from '../utils/copyGrid/copyGrid';\nimport removeNumbers from '../utils/removeNumbers/removeNumbers';\nimport \"../styles/App.css\";\nimport solveGrid from \"../utils/solveGrid/solveGrid\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      console.log(\"solve\");\n    };\n\n    this.stop = () => {\n      console.log(\"stop\");\n    };\n\n    this.newGame = () => {\n      this.createFullGrid();\n    };\n\n    this.deleteGame = () => {\n      console.log(\"delete game\");\n    };\n\n    this.goBack = () => {\n      console.log(\"go back\");\n    };\n\n    this.setActiveCells = (row, col) => {\n      const activeCells = [];\n      activeCells.push(row, col);\n      this.setState(state => {\n        return {\n          activeCells\n        };\n      });\n    };\n\n    this.handleChange = (e, rowIndex, colIndex) => {\n      const value = parseInt(e.target.value);\n\n      if (e.target.value > 0 && e.target.value <= 9) {\n        this.setState(prevState => {\n          const currentGrid = prevState.cellValues;\n          currentGrid[rowIndex][colIndex] = value;\n          return {\n            cellValues: currentGrid\n          };\n        });\n      }\n    };\n\n    this.createNewGame = () => {\n      const solvedGrid = createFullGrid();\n      const solvedGridCopy = copyGrid(solvedGrid);\n      const challengeGrid = removeNumbers(solvedGridCopy);\n      this.setState(state => {\n        return {\n          cellValues: challengeGrid,\n          solvedCellValues: solvedGrid\n        };\n      });\n    };\n\n    this.state = {\n      cellValues: [],\n      solvedCellValues: [],\n      activeCells: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidUpdate() {}\n\n  componentDidMount() {\n    this.createNewGame();\n    console.log(this.state);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"app-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tools, {\n      solve: this.solve,\n      stop: this.stop,\n      newGame: this.newGame,\n      deleteGame: this.deleteGame,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Board, {\n      cellValues: this.state.cellValues,\n      activeCells: this.state.activeCells,\n      handleChange: this.handleChange,\n      setActiveCells: this.setActiveCells,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js"],"names":["React","Banner","Tools","Board","Footer","createFullGrid","copyGrid","removeNumbers","solveGrid","App","Component","constructor","props","solve","console","log","stop","newGame","deleteGame","goBack","setActiveCells","row","col","activeCells","push","setState","state","handleChange","e","rowIndex","colIndex","value","parseInt","target","prevState","currentGrid","cellValues","createNewGame","solvedGrid","solvedGridCopy","challengeGrid","solvedCellValues","bind","componentDidUpdate","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\n\n\n\nimport createFullGrid from '../utils/createFullGrid/createFullGrid';\nimport copyGrid from '../utils/copyGrid/copyGrid';\nimport removeNumbers from '../utils/removeNumbers/removeNumbers';\n\n\n\nimport \"../styles/App.css\";\nimport solveGrid from \"../utils/solveGrid/solveGrid\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cellValues: [],\n      solvedCellValues: [],\n      activeCells: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  solve = () => {\n    console.log(\"solve\");\n  };\n  stop = () => {\n    console.log(\"stop\");\n  };\n  newGame = () => {\n    this.createFullGrid();\n  };\n  deleteGame = () => {\n    console.log(\"delete game\");\n  };\n  goBack = () => {\n    console.log(\"go back\");\n  };\n  setActiveCells = (row, col) => {\n    const activeCells = []\n    activeCells.push(row, col)\n    this.setState((state) => {\n      return {\n        activeCells\n      }\n    })\n  }\n  handleChange = (e, rowIndex, colIndex) => {\n    const value = parseInt(e.target.value);\n    if (e.target.value > 0 && e.target.value <= 9) {\n      this.setState(prevState => {\n        const currentGrid = prevState.cellValues;\n        currentGrid[rowIndex][colIndex] = value;\n        return {\n          cellValues: currentGrid\n        };\n      });\n    }\n  };\n  componentDidUpdate() {\n    \n  }\n  createNewGame = () => {\n    const solvedGrid = createFullGrid()\n    const solvedGridCopy = copyGrid(solvedGrid)\n    const challengeGrid = removeNumbers(solvedGridCopy)\n    this.setState((state) => {\n      return {\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid\n      }\n    })\n  }\n\n  componentDidMount() {\n    this.createNewGame()\n    console.log(this.state)\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <Banner />\n        <section className=\"app-body\">\n          <Tools\n            solve={this.solve}\n            stop={this.stop}\n            newGame={this.newGame}\n            deleteGame={this.deleteGame}\n            goBack={this.goBack}\n          />\n          <Board\n            cellValues={this.state.cellValues}\n            activeCells={this.state.activeCells}\n            handleChange={this.handleChange}\n            setActiveCells={this.setActiveCells}\n          />\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js\";\nimport React from \"react\";\n\nconst BoardRow = props => {\n  const {\n    cellValues,\n    id,\n    handleChange\n  } = props;\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const getCellValue = (id, columnNum) => {\n    let num = (parseInt(id) - 1) * 9 + (columnNum - 1);\n    return cellValues[num];\n  };\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, columns.map(element => {\n    const cellId = id + element;\n    const cellValue = getCellValue(id, element);\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: cellValue,\n      onChange: e => {\n        handleChange(e);\n      },\n      id: cellId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nexport default BoardRow;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js"],"names":["React","BoardRow","props","cellValues","id","handleChange","columns","getCellValue","columnNum","num","parseInt","map","element","cellId","cellValue","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,EAAd;AAAkBC,IAAAA;AAAlB,MAAmCH,KAAzC;AAEA,QAAMI,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAhB;;AACA,QAAMC,YAAY,GAAG,CAACH,EAAD,EAAKI,SAAL,KAAmB;AACtC,QAAIC,GAAG,GAAI,CAACC,QAAQ,CAACN,EAAD,CAAR,GAAe,CAAhB,IAAqB,CAAtB,IAA4BI,SAAS,GAAG,CAAxC,CAAV;AAEA,WAAOL,UAAU,CAACM,GAAD,CAAjB;AACD,GAJD;;AAMA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCH,OAAO,CAACK,GAAR,CAAaC,OAAD,IAAa;AACxB,UAAMC,MAAM,GAAGT,EAAE,GAAGQ,OAApB;AACA,UAAME,SAAS,GAAGP,YAAY,CAACH,EAAD,EAAKQ,OAAL,CAA9B;AAEA,wBACE;AAAI,MAAA,GAAG,EAAEA,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AACA,MAAA,KAAK,EAAEE,SADP;AAEA,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACfV,QAAAA,YAAY,CAACU,CAAD,CAAZ;AACD,OAJD;AAKA,MAAA,EAAE,EAAEF,MALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAWD,GAfA,CADD,CADF;AAoBH,CA9BD;;AAiCA,eAAeZ,QAAf","sourcesContent":["import React from \"react\";\n\nconst BoardRow = (props) => {\n    const { cellValues, id, handleChange } = props\n\n    const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    const getCellValue = (id, columnNum) => {\n      let num = ((parseInt(id) - 1) * 9) + (columnNum - 1) \n\n      return cellValues[num]\n    }\n\n    return (\n      <tr>\n      {columns.map((element) => {\n        const cellId = id + element\n        const cellValue = getCellValue(id, element)\n        \n        return (\n          <td key={element}>\n            <input type=\"text\"\n            value={cellValue}\n            onChange={(e) => {\n              handleChange(e)\n            }}\n            id={cellId}\n            />\n          </td>\n        )\n      })}\n      </tr>\n    )\n}\n\n\nexport default BoardRow"]},"metadata":{},"sourceType":"module"}
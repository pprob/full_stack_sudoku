{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js\";\nimport React from \"react\";\nimport \"../styles/BoardRow.css\";\n\nconst BoardRow = props => {\n  const {\n    cellValues,\n    activeCells,\n    solvedCellValues,\n    rowIndex,\n    handleChange,\n    setActiveCells\n  } = props;\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = row === activeCells[0] && column === activeCells[1] ? true : false;\n    if (row === activeCells[0] && !isSameAsActive) return true;\n    if (column === activeCells[1] && !isSameAsActive) return true;\n    return false;\n  }; // Setting border classnames \n  // columns\n\n\n  const isLeftColBorder = col => {\n    if (col === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isRightColBorder = col => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true;\n    }\n\n    return false;\n  }; // rows\n\n\n  const isTopRowBorder = row => {\n    if (row === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isBottomRowBorder = row => {\n    if (row === 2 || row === 5 || row === 8) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, columns.map(element => {\n    const colIndex = element - 1;\n    const cellValue = getValue(rowIndex, colIndex);\n    const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : '';\n    let borderClasses = '';\n\n    if (isLeftColBorder(colIndex)) {\n      borderClasses += 'grid-border-left ';\n    }\n\n    if (isRightColBorder(colIndex)) {\n      borderClasses += 'grid-border-right ';\n    }\n\n    if (isTopRowBorder(rowIndex)) {\n      borderClasses += 'grid-border-top ';\n    }\n\n    if (isBottomRowBorder(rowIndex)) {\n      borderClasses += 'grid-border-bottom';\n    }\n\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: element,\n      className: `square-cell ${borderClasses}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: cellValue,\n      onClick: e => setActiveCells(rowIndex, colIndex),\n      onChange: e => handleChange(e, rowIndex, colIndex),\n      className: `square-input ${inPlay}`,\n      maxLength: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nexport default BoardRow;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js"],"names":["React","BoardRow","props","cellValues","activeCells","solvedCellValues","rowIndex","handleChange","setActiveCells","columns","getValue","row","column","isInPlay","isSameAsActive","isLeftColBorder","col","isRightColBorder","isTopRowBorder","isBottomRowBorder","map","element","colIndex","cellValue","inPlay","borderClasses","e"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/BoardRow.css\";\n\nconst BoardRow = props => {\n  const { cellValues, activeCells, solvedCellValues, rowIndex, handleChange, setActiveCells } = props;\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = (row === activeCells[0] && column === activeCells[1]) ? true : false\n    if (row === activeCells[0] && !isSameAsActive ) return true\n    if (column === activeCells[1] && !isSameAsActive) return true\n    return false\n  }\n\n  // Setting border classnames \n  // columns\n  const isLeftColBorder = (col) => {\n    if (col === 0) {\n      return true\n    }\n    return false\n  }\n  const isRightColBorder = (col) => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true\n    }\n    return false\n  }\n  // rows\n  const isTopRowBorder = (row) => {\n    if (row === 0) {\n      return true\n    }\n    return false\n  }\n  const isBottomRowBorder = (row) => {\n    if (row === 2 || row === 5 || row === 8) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <tr>\n      {columns.map(element => {\n        const colIndex = element - 1;\n        const cellValue = getValue(rowIndex, colIndex);\n        const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : ''\n        let borderClasses = ''\n        if (isLeftColBorder(colIndex)) {\n          borderClasses += 'grid-border-left '\n        } \n        if (isRightColBorder(colIndex)) {\n          borderClasses += 'grid-border-right '\n        }\n        if (isTopRowBorder(rowIndex)) {\n          borderClasses += 'grid-border-top '\n        }\n        if (isBottomRowBorder(rowIndex)) {\n          borderClasses += 'grid-border-bottom'\n        }\n\n        return (\n          <td key={element} className={`square-cell ${borderClasses}`}>\n            <input\n              type=\"text\"\n              value={cellValue}\n              onClick={e => setActiveCells(rowIndex, colIndex)}\n              onChange={e => handleChange(e, rowIndex, colIndex)}\n              className={`square-input ${inPlay}`}\n              maxLength='1'\n            />\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nexport default BoardRow;\n"]},"metadata":{},"sourceType":"module"}
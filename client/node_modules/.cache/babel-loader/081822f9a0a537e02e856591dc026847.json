{"ast":null,"code":"import global from '../../global';\nimport getRandomIndex from '../getRandomIndex/getRandomIndex';\nimport copyGrid from '../copyGrid/copyGrid';\nimport solveGrid from '../solveGrid/solveGrid';\n\nfunction removeNumbers(grid, attempts = 5) {\n  while (attempts > 0) {\n    let row = getRandomIndex();\n    let col = getRandomIndex();\n\n    while (grid[row][col] === 0) {\n      row = getRandomIndex();\n      col = getRandomIndex();\n    }\n\n    const backup = grid[row][col];\n    grid[row][col] = 0;\n    const gridCopy = copyGrid(grid);\n    global.counter = 0;\n    solveGrid(gridCopy);\n\n    if (global.counter !== 1) {\n      grid[row][col] = backup;\n      attempts--;\n    }\n  }\n\n  return grid;\n}\n\nexport default removeNumbers;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/utils/removeNumbers/removeNumbers.js"],"names":["global","getRandomIndex","copyGrid","solveGrid","removeNumbers","grid","attempts","row","col","backup","gridCopy","counter"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAGA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,QAAQ,GAAG,CAAxC,EAA2C;AACzC,SAAOA,QAAQ,GAAG,CAAlB,EAAqB;AACnB,QAAIC,GAAG,GAAGN,cAAc,EAAxB;AACA,QAAIO,GAAG,GAAGP,cAAc,EAAxB;;AAEA,WAAOI,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,MAAmB,CAA1B,EAA6B;AAC3BD,MAAAA,GAAG,GAAGN,cAAc,EAApB;AACAO,MAAAA,GAAG,GAAGP,cAAc,EAApB;AACD;;AACD,UAAMQ,MAAM,GAAGJ,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,CAAf;AACAH,IAAAA,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,IAAiB,CAAjB;AAEA,UAAME,QAAQ,GAAGR,QAAQ,CAACG,IAAD,CAAzB;AAEAL,IAAAA,MAAM,CAACW,OAAP,GAAiB,CAAjB;AACAR,IAAAA,SAAS,CAACO,QAAD,CAAT;;AAEA,QAAIV,MAAM,CAACW,OAAP,KAAmB,CAAvB,EAA0B;AACxBN,MAAAA,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,IAAiBC,MAAjB;AACAH,MAAAA,QAAQ;AACT;AACF;;AACD,SAAOD,IAAP;AACD;;AAED,eAAeD,aAAf","sourcesContent":["import global from '../../global';\nimport getRandomIndex from '../getRandomIndex/getRandomIndex';\nimport copyGrid from '../copyGrid/copyGrid';\nimport solveGrid from '../solveGrid/solveGrid';\n\n\nfunction removeNumbers(grid, attempts = 5) {\n  while (attempts > 0) {\n    let row = getRandomIndex()\n    let col = getRandomIndex()\n\n    while (grid[row][col] === 0) {\n      row = getRandomIndex()\n      col = getRandomIndex()\n    }\n    const backup = grid[row][col];\n    grid[row][col] = 0\n    \n    const gridCopy = copyGrid(grid);\n\n    global.counter = 0\n    solveGrid(gridCopy);\n\n    if (global.counter !== 1) {\n      grid[row][col] = backup;\n      attempts--\n    }\n  }\n  return grid;\n}\n\nexport default removeNumbers\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import createFullGrid from '../utils/createFullGrid/createFullGrid';\nimport copyGrid from '../utils/copyGrid/copyGrid';\nimport removeNumbers from '../utils/removeNumbers/removeNumbers';\nconst defaultState = {\n  cellValues: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],\n  solvedCellValues: [],\n  activeCells: [],\n  difficulty: 5,\n  feedback: true\n};\n\nconst countZeroes = array => {\n  let count = 0;\n\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (array[i][j] === 0) {\n        count += 1;\n      }\n    }\n  }\n\n  return count;\n};\n\nexport default ((state = defaultState, action) => {\n  switch (action.type) {\n    case 'CREATE_NEW_GAME':\n      const solvedGrid = createFullGrid();\n      const copyOfSolvedGrid = copyGrid(solvedGrid);\n      const challengeGrid = removeNumbers(copyOfSolvedGrid, action.difficulty);\n      console.log(countZeroes(challengeGrid));\n      return { ...state,\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid\n      };\n\n    case 'SET_ACTIVE_CELLS':\n      const activeCells = [];\n      activeCells.push(action.row, action.col);\n      return { ...state,\n        activeCells: activeCells\n      };\n\n    case 'SET_CELL_VALUE':\n      const currentGrid = state.cellValues;\n      currentGrid[action.row][action.col] = action.value;\n      return { ...state,\n        cellValues: [...currentGrid]\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/redux/appReducer.js"],"names":["createFullGrid","copyGrid","removeNumbers","defaultState","cellValues","solvedCellValues","activeCells","difficulty","feedback","countZeroes","array","count","i","j","state","action","type","solvedGrid","copyOfSolvedGrid","challengeGrid","console","log","push","row","col","currentGrid","value"],"mappings":"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","sourcesContent":["import createFullGrid from '../utils/createFullGrid/createFullGrid'\nimport copyGrid from '../utils/copyGrid/copyGrid'\nimport removeNumbers from '../utils/removeNumbers/removeNumbers'\n\n\nconst defaultState = {\n  cellValues: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  solvedCellValues: [],\n  activeCells: [],\n  difficulty: 5,\n  feedback: true,\n}\nconst countZeroes = (array) => {\n  let count = 0\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (array[i][j] === 0) {\n        count+=1\n      }\n    }\n  }\n  return count\n}\n\nexport default (state = defaultState, action) => {\n  switch(action.type) {\n    case 'CREATE_NEW_GAME':\n      const solvedGrid = createFullGrid()\n      const copyOfSolvedGrid = copyGrid(solvedGrid)\n      const challengeGrid = removeNumbers(copyOfSolvedGrid, action.difficulty)\n      console.log(countZeroes(challengeGrid))\n\n      return {\n        ...state,\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid\n      }\n    case 'SET_ACTIVE_CELLS':\n      const activeCells = []\n      activeCells.push(action.row, action.col)\n      return {\n        ...state,\n        activeCells: activeCells\n      }\n    case 'SET_CELL_VALUE':\n      const currentGrid = state.cellValues\n      currentGrid[action.row][action.col] = action.value\n      return {\n        ...state,\n        cellValues: [...currentGrid]\n      }\n    default: \n      return state\n  }\n}"]},"metadata":{},"sourceType":"module"}
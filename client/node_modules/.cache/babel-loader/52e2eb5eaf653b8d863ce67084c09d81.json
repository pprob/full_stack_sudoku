{"ast":null,"code":"import isInRow from '../isInRow/isInRow';\nimport isInCol from '../isInCol/isInCol';\nimport identifyWorkingSquare from '../identifyWorkingSquare/identifyWorkingSquare';\nimport isInSquare from '../isInSquare/isInSquare';\nimport checkGrid from '../checkGrid/checkGrid';\n\nfunction solveGrid(grid) {\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let row = 0;\n  let col = 0;\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9);\n    col = i % 9;\n\n    if (grid[row][col] === 0) {\n      for (let value of numbers) {\n        if (!isInRow({\n          grid,\n          row,\n          value\n        })) {\n          if (!isInCol({\n            grid,\n            col,\n            value\n          })) {\n            const square = identifyWorkingSquare({\n              grid,\n              row,\n              col\n            });\n\n            if (!isInSquare({\n              square,\n              value\n            })) {\n              grid[row][col] = value;\n\n              if (checkGrid(grid)) {\n                // global.counter++\n                break;\n              } else if (solveGrid(grid)) return true;\n            }\n          }\n        }\n      }\n\n      break;\n    }\n  }\n}\n\nexport default solveGrid;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/utils/solveGrid/solveGrid.js"],"names":["isInRow","isInCol","identifyWorkingSquare","isInSquare","checkGrid","solveGrid","grid","numbers","row","col","i","Math","floor","value","square"],"mappings":"AACA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,qBAAP,MAAkC,gDAAlC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAGA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAEvB,QAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAhB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BF,IAAAA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,CAAf,CAAN;AACAD,IAAAA,GAAG,GAAGC,CAAC,GAAG,CAAV;;AAEA,QAAIJ,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,MAAmB,CAAvB,EAA0B;AACxB,WAAK,IAAII,KAAT,IAAkBN,OAAlB,EAA2B;AACzB,YAAI,CAACP,OAAO,CAAC;AAAEM,UAAAA,IAAF;AAAQE,UAAAA,GAAR;AAAaK,UAAAA;AAAb,SAAD,CAAZ,EAAoC;AAClC,cAAI,CAACZ,OAAO,CAAC;AAAEK,YAAAA,IAAF;AAAQG,YAAAA,GAAR;AAAaI,YAAAA;AAAb,WAAD,CAAZ,EAAoC;AAClC,kBAAMC,MAAM,GAAGZ,qBAAqB,CAAC;AAAEI,cAAAA,IAAF;AAAQE,cAAAA,GAAR;AAAaC,cAAAA;AAAb,aAAD,CAApC;;AACA,gBAAI,CAACN,UAAU,CAAC;AAAEW,cAAAA,MAAF;AAAUD,cAAAA;AAAV,aAAD,CAAf,EAAoC;AAClCP,cAAAA,IAAI,CAACE,GAAD,CAAJ,CAAUC,GAAV,IAAiBI,KAAjB;;AACA,kBAAIT,SAAS,CAACE,IAAD,CAAb,EAAqB;AACnB;AACA;AACD,eAHD,MAIK,IAAID,SAAS,CAACC,IAAD,CAAb,EAAqB,OAAO,IAAP;AAC3B;AACF;AACF;AACF;;AACD;AACD;AACF;AACF;;AACD,eAAeD,SAAf","sourcesContent":["\nimport isInRow from '../isInRow/isInRow'\nimport isInCol from '../isInCol/isInCol'\nimport identifyWorkingSquare from '../identifyWorkingSquare/identifyWorkingSquare'\nimport isInSquare from '../isInSquare/isInSquare'\nimport checkGrid from '../checkGrid/checkGrid'\n\n\nfunction solveGrid(grid) {\n\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  let row = 0\n  let col = 0\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9)\n    col = i % 9\n\n    if (grid[row][col] === 0) {\n      for (let value of numbers) {\n        if (!isInRow({ grid, row, value })) {\n          if (!isInCol({ grid, col, value })) {\n            const square = identifyWorkingSquare({ grid, row, col })\n            if (!isInSquare({ square, value })) {\n              grid[row][col] = value\n              if (checkGrid(grid)) {\n                // global.counter++\n                break\n              }\n              else if (solveGrid(grid)) return true\n            }\n          }\n        }\n      }\n      break\n    }\n  }\n}\nexport default solveGrid"]},"metadata":{},"sourceType":"module"}
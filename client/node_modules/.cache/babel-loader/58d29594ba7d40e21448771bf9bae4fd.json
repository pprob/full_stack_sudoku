{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/InfoBox.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setDifficulty, setFeedback } from '../redux/infoActions';\nimport \"../styles/App.css\";\nimport \"../styles/InfoBox.css\"; // difficulty, setDifficulty, feedback, changeFeedbackToggle\n\nconst InfoBox = ({\n  difficulty,\n  feedback,\n  dispatch\n}) => {\n  const difficultyLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, \"Select your difficulty level:\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-down\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }\n  }, difficulty), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-down-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 15\n    }\n  }, difficultyLevels.map(level => {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"option\",\n      key: level,\n      value: level,\n      onClick: e => dispatch(setDifficulty(level)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 26\n      }\n    }, level);\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, \"Would you like real-time feedback as you play?\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"feedback\",\n    id: \"yes\",\n    checked: feedback,\n    onChange: e => {\n      if (e.target.value === \"yes\") dispatch(setFeedback(true));\n    },\n    value: \"yes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"feedback\",\n    value: \"no\",\n    id: \"no\",\n    checked: !feedback,\n    onChange: e => {\n      if (e.target.value === 'no') dispatch(setFeedback(false));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  })))));\n};\n\nInfoBox.propTypes = {\n  difficulty: PropTypes.number,\n  feedback: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n  return {\n    difficulty: state.infoState.difficulty,\n    feedback: state.infoState.feedback\n  };\n};\n\nexport default connect(mapStateToProps)(InfoBox); // onChange={e => {\n//   dispatch(setDifficulty(e.value))","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/InfoBox.js"],"names":["React","PropTypes","connect","setDifficulty","setFeedback","InfoBox","difficulty","feedback","dispatch","difficultyLevels","map","level","e","target","value","propTypes","number","bool","mapStateToProps","state","infoState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setDifficulty, setFeedback } from '../redux/infoActions'\nimport \"../styles/App.css\";\nimport \"../styles/InfoBox.css\";\n\n// difficulty, setDifficulty, feedback, changeFeedbackToggle\nconst InfoBox = ({ difficulty, feedback, dispatch }) => {\n  const difficultyLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n  return (\n    <div className='info-box'>\n      <div className='app-container'>\n        <div>\n          <div className='info-item'>Select your difficulty level:\n          <div className='drop-down'>\n              <button>{difficulty}</button>\n              <div className='drop-down-content'>\n                {difficultyLevels.map((level) => {\n                  return <button className='option' key={level} value={level} onClick={(e) => dispatch(setDifficulty(level))}>{level}</button>\n                })}\n              </div>\n            </div>\n          </div>\n\n          <div className='info-item'>\n            Would you like real-time feedback as you play?\n            <input\n              type='radio'\n              name='feedback'\n              id='yes'\n              checked={feedback}\n              onChange={(e) => {\n                if (e.target.value === \"yes\") dispatch(setFeedback(true));\n              }}\n              value='yes'\n            />\n            <input\n              type='radio'\n              name='feedback'\n              value='no'\n              id='no'\n              checked={!feedback}\n              onChange={(e) => {\n                if (e.target.value === 'no') dispatch(setFeedback(false))\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nInfoBox.propTypes = {\n  difficulty: PropTypes.number,\n  feedback: PropTypes.bool,\n};\nconst mapStateToProps = (state) => {\n  return {\n    difficulty: state.infoState.difficulty,\n    feedback: state.infoState.feedback,\n  };\n};\n\nexport default connect(mapStateToProps)(InfoBox);\n\n// onChange={e => {\n//   dispatch(setDifficulty(e.value))\n"]},"metadata":{},"sourceType":"module"}
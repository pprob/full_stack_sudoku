{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport setActiveCells from \"../redux/actions\";\nimport \"../styles/BoardRow.css\"; //cellValues, activeCells, solvedCellValues, rowIndex, handleChange, setActiveCells\n\nconst BoardRow = props => {\n  const {\n    cellValues,\n    rowIndex,\n    activeCells\n  } = props;\n  console.log(activeCells);\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = row === activeCells[0] && column === activeCells[1] ? true : false;\n    if (row === activeCells[0] && !isSameAsActive) return true;\n    if (column === activeCells[1] && !isSameAsActive) return true;\n    return false;\n  }; // Setting border classnames \n  // columns\n\n\n  const isLeftColBorder = col => {\n    if (col === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isRightColBorder = col => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true;\n    }\n\n    return false;\n  }; // rows\n\n\n  const isTopRowBorder = row => {\n    if (row === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isBottomRowBorder = row => {\n    if (row === 2 || row === 5 || row === 8) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, columns.map(element => {\n    const colIndex = element - 1;\n    var cellValue = getValue(rowIndex, colIndex);\n\n    if (cellValue === 0) {\n      cellValue = '';\n    }\n\n    const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : '';\n    let borderClasses = '';\n\n    if (isLeftColBorder(colIndex)) {\n      borderClasses += 'grid-border-left ';\n    }\n\n    if (isRightColBorder(colIndex)) {\n      borderClasses += 'grid-border-right ';\n    }\n\n    if (isTopRowBorder(rowIndex)) {\n      borderClasses += 'grid-border-top ';\n    }\n\n    if (isBottomRowBorder(rowIndex)) {\n      borderClasses += 'grid-border-bottom';\n    }\n\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: element,\n      className: `square-cell ${borderClasses}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"square-input\",\n      type: \"text\",\n      value: cellValue,\n      maxLength: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    cellValues: state.cellValues,\n    solvedCellValues: state.solvedCellValues,\n    activeCells: [0, 0]\n  };\n};\n\nexport default connect(mapStateToProps)(BoardRow);","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js"],"names":["React","connect","setActiveCells","BoardRow","props","cellValues","rowIndex","activeCells","console","log","columns","getValue","row","column","isInPlay","isSameAsActive","isLeftColBorder","col","isRightColBorder","isTopRowBorder","isBottomRowBorder","map","element","colIndex","cellValue","inPlay","borderClasses","mapStateToProps","state","solvedCellValues"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\"\nimport setActiveCells from \"../redux/actions\"\nimport \"../styles/BoardRow.css\";\n\n//cellValues, activeCells, solvedCellValues, rowIndex, handleChange, setActiveCells\n\nconst BoardRow = props => {\n  const { cellValues, rowIndex, activeCells } = props;\n  console.log(activeCells)\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = (row === activeCells[0] && column === activeCells[1]) ? true : false\n    if (row === activeCells[0] && !isSameAsActive ) return true\n    if (column === activeCells[1] && !isSameAsActive) return true\n    return false\n  }\n\n  // Setting border classnames \n  // columns\n  const isLeftColBorder = (col) => {\n    if (col === 0) {\n      return true\n    }\n    return false\n  }\n  const isRightColBorder = (col) => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true\n    }\n    return false\n  }\n  // rows\n  const isTopRowBorder = (row) => {\n    if (row === 0) {\n      return true\n    }\n    return false\n  }\n  const isBottomRowBorder = (row) => {\n    if (row === 2 || row === 5 || row === 8) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <tr>\n      {columns.map(element => {\n        const colIndex = element - 1;\n        var cellValue = getValue(rowIndex, colIndex);\n        if (cellValue === 0) {\n          cellValue = ''\n        }\n        const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : ''\n        let borderClasses = ''\n        if (isLeftColBorder(colIndex)) {\n          borderClasses += 'grid-border-left '\n        } \n        if (isRightColBorder(colIndex)) {\n          borderClasses += 'grid-border-right '\n        }\n        if (isTopRowBorder(rowIndex)) {\n          borderClasses += 'grid-border-top '\n        }\n        if (isBottomRowBorder(rowIndex)) {\n          borderClasses += 'grid-border-bottom'\n        }\n\n        return (\n          <td key={element} className={`square-cell ${borderClasses}`}>\n            <input\n             className='square-input'\n              type=\"text\"\n              value={cellValue}\n              maxLength='1'\n            />\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cellValues: state.cellValues,\n    solvedCellValues: state.solvedCellValues,\n    activeCells: [0, 0]\n  }\n}\n\nexport default connect(mapStateToProps)(BoardRow)\n"]},"metadata":{},"sourceType":"module"}
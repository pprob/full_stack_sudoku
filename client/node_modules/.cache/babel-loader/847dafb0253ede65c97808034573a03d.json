{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/InfoBox.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setDifficulty, setFeedback } from \"../redux/actions\";\nimport \"../styles/App.css\";\nimport \"../styles/InfoBox.css\"; // difficulty, setDifficulty, feedback, changeFeedbackToggle\n\nconst InfoBox = ({\n  difficulty,\n  feedback,\n  dispatch\n}) => {\n  const difficultyLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const dropDownOptions = difficultyLevels.map(number => ({\n    key: number,\n    text: number,\n    value: number\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, \"Select your difficulty level:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, \"Would you like real-time feedback as you play?\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"feedback\",\n    id: \"yes\",\n    onChange: e => {\n      if (e.target.value === \"yes\") dispatch(setFeedback(true));\n    },\n    value: \"yes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"feedback\",\n    value: \"no\",\n    id: \"no\",\n    onChange: e => {\n      if (e.target.value === 'no') dispatch(setFeedback(false));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  })))));\n};\n\nInfoBox.propTypes = {\n  difficulty: PropTypes.number,\n  feedback: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n  return {\n    difficulty: state.difficulty,\n    feedback: state.feedback\n  };\n};\n\nexport default connect(mapStateToProps)(InfoBox); // onChange={e => {\n//   dispatch(setDifficulty(e.value))","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/InfoBox.js"],"names":["React","PropTypes","connect","setDifficulty","setFeedback","InfoBox","difficulty","feedback","dispatch","difficultyLevels","dropDownOptions","map","number","key","text","value","e","target","propTypes","bool","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,kBAA3C;AACA,OAAO,mBAAP;AACA,OAAO,uBAAP,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA;AAAxB,CAAD,KAAwC;AACtD,QAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,CAAzB;AACA,QAAMC,eAAe,GAAGD,gBAAgB,CAACE,GAAjB,CAAsBC,MAAD,KAAa;AACxDC,IAAAA,GAAG,EAAED,MADmD;AAExDE,IAAAA,IAAI,EAAEF,MAFkD;AAGxDG,IAAAA,KAAK,EAAEH;AAHiD,GAAb,CAArB,CAAxB;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,eAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAEE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,EAAE,EAAC,KAHL;AAIE,IAAA,QAAQ,EAAGI,CAAD,IAAO;AACf,UAAIA,CAAC,CAACC,MAAF,CAASF,KAAT,KAAmB,KAAvB,EAA8BP,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AAC/B,KANH;AAOE,IAAA,KAAK,EAAC,KAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAWE;AACA,IAAA,IAAI,EAAC,OADL;AAEA,IAAA,IAAI,EAAC,UAFL;AAGA,IAAA,KAAK,EAAC,IAHN;AAIA,IAAA,EAAE,EAAC,IAJH;AAKA,IAAA,QAAQ,EAAGY,CAAD,IAAO;AACf,UAAIA,CAAC,CAACC,MAAF,CAASF,KAAT,KAAmB,IAAvB,EAA6BP,QAAQ,CAACJ,WAAW,CAAC,KAAD,CAAZ,CAAR;AAC9B,KAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CAHF,CADF,CADF,CADF;AA+BD,CAxCD;;AA0CAC,OAAO,CAACa,SAAR,GAAoB;AAClBZ,EAAAA,UAAU,EAAEL,SAAS,CAACW,MADJ;AAElBL,EAAAA,QAAQ,EAAEN,SAAS,CAACkB;AAFF,CAApB;;AAIA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLf,IAAAA,UAAU,EAAEe,KAAK,CAACf,UADb;AAELC,IAAAA,QAAQ,EAAEc,KAAK,CAACd;AAFX,GAAP;AAID,CALD;;AAOA,eAAeL,OAAO,CAACkB,eAAD,CAAP,CAAyBf,OAAzB,CAAf,C,CAEA;AACA","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { setDifficulty, setFeedback } from \"../redux/actions\";\nimport \"../styles/App.css\";\nimport \"../styles/InfoBox.css\";\n\n// difficulty, setDifficulty, feedback, changeFeedbackToggle\nconst InfoBox = ({ difficulty, feedback, dispatch }) => {\n  const difficultyLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const dropDownOptions = difficultyLevels.map((number) => ({\n    key: number,\n    text: number,\n    value: number,\n  }));\n  \n  \n  return (\n    <div className='info-box'>\n      <div className='app-container'>\n        <div>\n          <div className='info-item'>Select your difficulty level:</div>\n\n          <div className='info-item'>\n            Would you like real-time feedback as you play?\n            <input\n              type='radio'\n              name='feedback'\n              id='yes'\n              onChange={(e) => {\n                if (e.target.value === \"yes\") dispatch(setFeedback(true));\n              }}\n              value='yes'\n            />\n            <input \n            type='radio' \n            name='feedback'\n            value='no'\n            id='no'\n            onChange={(e) => {\n              if (e.target.value === 'no') dispatch(setFeedback(false))\n            }} \n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nInfoBox.propTypes = {\n  difficulty: PropTypes.number,\n  feedback: PropTypes.bool,\n};\nconst mapStateToProps = (state) => {\n  return {\n    difficulty: state.difficulty,\n    feedback: state.feedback,\n  };\n};\n\nexport default connect(mapStateToProps)(InfoBox);\n\n// onChange={e => {\n//   dispatch(setDifficulty(e.value))\n"]},"metadata":{},"sourceType":"module"}
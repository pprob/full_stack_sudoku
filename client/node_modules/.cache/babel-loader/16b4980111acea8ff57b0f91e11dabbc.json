{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js\";\nimport React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport global from '../global';\nimport isInCol from '../utils/isInCol/isInCol';\nimport isInRow from '../utils/isInRow/isInRow';\nimport identifyWorkingSquare from '../utils/identifyWorkingSquare/identifyWorkingSquare';\nimport isInSquare from '../utils/isInSquare/isInSquare';\nimport checkGrid from '../utils/checkGrid/checkGrid';\nimport createFullGrid from '../utils/createFullGrid/createFullGrid';\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      console.log(\"solve\");\n    };\n\n    this.stop = () => {\n      console.log(\"stop\");\n    };\n\n    this.newGame = () => {\n      this.createFullGrid();\n    };\n\n    this.deleteGame = () => {\n      console.log(\"delete game\");\n    };\n\n    this.goBack = () => {\n      console.log(\"go back\");\n    };\n\n    this.handleChange = (e, rowIndex, colIndex) => {\n      const value = parseInt(e.target.value);\n\n      if (e.target.value > 0 && e.target.value <= 9) {\n        this.setState(prevState => {\n          const currentGrid = prevState.cellValues;\n          currentGrid[rowIndex][colIndex] = value;\n          return {\n            cellValues: currentGrid\n          };\n        });\n      }\n    };\n\n    this.getRandomIndex = () => {\n      return Math.floor(Math.random() * Math.floor(9));\n    };\n\n    this.copyGrid = grid => {\n      const gridCopy = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n\n      for (let r = 0; r < 9; r++) {\n        for (let c = 0; c < 9; c++) {\n          gridCopy[r][c] = grid[r][c];\n        }\n      }\n\n      return gridCopy;\n    };\n\n    this.solveGrid = grid => {\n      const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n      let row = 0;\n      let col = 0;\n\n      for (let i = 0; i < 81; i++) {\n        row = Math.floor(i / 9);\n        col = i % 9;\n\n        if (grid[row][col] === 0) {\n          for (let value of numbers) {\n            if (!isInRow({\n              grid,\n              row,\n              value\n            })) {\n              if (!isInCol({\n                grid,\n                col,\n                value\n              })) {\n                const square = identifyWorkingSquare({\n                  grid,\n                  row,\n                  col\n                });\n\n                if (isInSquare({\n                  square,\n                  value\n                })) {\n                  grid[row][col] = value;\n\n                  if (checkGrid(grid)) {\n                    global.counter++;\n                    break;\n                  } else if (this.solveGrid(grid)) return true;\n                }\n              }\n            }\n          }\n\n          break;\n        }\n      }\n    };\n\n    this.state = {\n      cellValues: createFullGrid()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  removeNumbers(grid, attempts = 5) {\n    while (attempts > 0) {\n      let row = this.getRandomIndex();\n      let col = this.getRandomIndex();\n\n      while (grid[row][col] === 0) {\n        row = this.getRandomIndex();\n        col = this.getRandomIndex();\n      }\n\n      const backup = grid[row][col];\n      grid[row][col] = 0;\n      console.log(grid);\n      const gridCopy = this.copyGrid(grid);\n      global.counter = 0;\n      this.solveGrid(gridCopy);\n\n      if (global.counter !== 1) {\n        grid[row][col] = backup;\n        attempts--;\n      }\n    }\n\n    return grid;\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"app-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tools, {\n      solve: this.solve,\n      stop: this.stop,\n      newGame: this.newGame,\n      deleteGame: this.deleteGame,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Board, {\n      cellValues: this.state.cellValues,\n      handleChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js"],"names":["React","Banner","Tools","Board","Footer","global","isInCol","isInRow","identifyWorkingSquare","isInSquare","checkGrid","createFullGrid","App","Component","constructor","props","solve","console","log","stop","newGame","deleteGame","goBack","handleChange","e","rowIndex","colIndex","value","parseInt","target","setState","prevState","currentGrid","cellValues","getRandomIndex","Math","floor","random","copyGrid","grid","gridCopy","r","c","solveGrid","numbers","row","col","i","square","counter","state","bind","removeNumbers","attempts","backup","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport global from '../global';\n\nimport isInCol from '../utils/isInCol/isInCol'\nimport isInRow from '../utils/isInRow/isInRow'\nimport identifyWorkingSquare from '../utils/identifyWorkingSquare/identifyWorkingSquare'\nimport isInSquare from '../utils/isInSquare/isInSquare'\nimport checkGrid from '../utils/checkGrid/checkGrid'\nimport createFullGrid from '../utils/createFullGrid/createFullGrid'\n\n\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cellValues: createFullGrid()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  solve = () => {\n    console.log(\"solve\");\n  };\n  stop = () => {\n    console.log(\"stop\");\n  };\n  newGame = () => {\n    this.createFullGrid();\n  };\n  deleteGame = () => {\n    console.log(\"delete game\");\n  };\n\n  goBack = () => {\n    console.log(\"go back\");\n  };\n  handleChange = (e, rowIndex, colIndex) => {\n    const value = parseInt(e.target.value);\n    if (e.target.value > 0 && e.target.value <= 9) {\n      this.setState(prevState => {\n        const currentGrid = prevState.cellValues;\n        currentGrid[rowIndex][colIndex] = value;\n        return {\n          cellValues: currentGrid\n        };\n      });\n    }\n  };\n\n  getRandomIndex = () => {\n    return Math.floor(Math.random() * Math.floor(9))\n  }\n  copyGrid = (grid) => {\n    const gridCopy = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ]\n    for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        gridCopy[r][c] = grid[r][c]\n      }\n    }\n    return gridCopy\n  }\n  removeNumbers(grid, attempts = 5) {\n    while (attempts > 0) {\n      let row = this.getRandomIndex()\n      let col = this.getRandomIndex()\n\n      while (grid[row][col] === 0) {\n        row = this.getRandomIndex()\n        col = this.getRandomIndex()\n      }\n      const backup = grid[row][col]\n      grid[row][col] = 0\n      console.log(grid)\n      const gridCopy = this.copyGrid(grid)\n\n      global.counter = 0\n      this.solveGrid(gridCopy)\n\n      if (global.counter !== 1) {\n        grid[row][col] = backup\n        attempts--\n      }\n\n    }\n    return grid\n  }\n  solveGrid = (grid) => {\n\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let row = 0\n    let col = 0\n\n    for (let i = 0; i < 81; i++) {\n      row = Math.floor(i / 9)\n      col = i % 9\n\n      if (grid[row][col] === 0) {\n        for (let value of numbers) {\n          if (!isInRow({ grid, row, value })) {\n            if (!isInCol({ grid, col, value })) {\n              const square = identifyWorkingSquare({ grid, row, col })\n              if (isInSquare({ square, value })) {\n                grid[row][col] = value\n                if (checkGrid(grid)) {\n                  global.counter++\n                  break\n                }\n                else if (this.solveGrid(grid)) return true\n              }\n            }\n          }\n        }\n        break\n      }\n    }\n  }\n  componentDidMount() {\n\n\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <Banner />\n        <section className=\"app-body\">\n          <Tools\n            solve={this.solve}\n            stop={this.stop}\n            newGame={this.newGame}\n            deleteGame={this.deleteGame}\n            goBack={this.goBack}\n          />\n          <Board\n            cellValues={this.state.cellValues}\n            handleChange={this.handleChange}\n          />\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
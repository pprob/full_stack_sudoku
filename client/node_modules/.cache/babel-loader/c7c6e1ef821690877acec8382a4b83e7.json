{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setActiveCells, setCellValue } from \"../redux/actions\";\nimport \"../styles/BoardRow.css\"; //cellValues, activeCells, solvedCellValues, rowIndex, handleChange, setActiveCells\n\nconst BoardRow = props => {\n  const {\n    cellValues,\n    solvedCellValues,\n    rowIndex,\n    activeCells,\n    dispatch\n  } = props;\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = row === activeCells[0] && column === activeCells[1] ? true : false;\n    if (row === activeCells[0] && !isSameAsActive) return true;\n    if (column === activeCells[1] && !isSameAsActive) return true;\n    return false;\n  };\n\n  const checkValid = (e, rowIndex, colIndex) => {\n    if (cellValues.length === 0 || solvedCellValues.length === 0) {\n      alert(\"Please start the game\");\n      return false;\n    }\n\n    const value = parseInt(e.target.value);\n\n    if (isNaN(value)) {\n      alert(\"You must enter a valid whole number between 0 and 9\");\n      return false;\n    }\n\n    if (solvedCellValues[rowIndex][colIndex] !== value) {\n      alert(\"incorrect input\");\n      return false;\n    }\n\n    return true;\n  }; // Setting border classnames \n  // columns\n\n\n  const isLeftColBorder = col => {\n    if (col === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isRightColBorder = col => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true;\n    }\n\n    return false;\n  }; // rows\n\n\n  const isTopRowBorder = row => {\n    if (row === 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isBottomRowBorder = row => {\n    if (row === 2 || row === 5 || row === 8) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, columns.map(element => {\n    const colIndex = element - 1;\n    var cellValue = getValue(rowIndex, colIndex);\n\n    if (cellValue === 0) {\n      cellValue = '';\n    }\n\n    const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : '';\n    let borderClasses = '';\n\n    if (isLeftColBorder(colIndex)) {\n      borderClasses += 'grid-border-left ';\n    }\n\n    if (isRightColBorder(colIndex)) {\n      borderClasses += 'grid-border-right ';\n    }\n\n    if (isTopRowBorder(rowIndex)) {\n      borderClasses += 'grid-border-top ';\n    }\n\n    if (isBottomRowBorder(rowIndex)) {\n      borderClasses += 'grid-border-bottom';\n    }\n\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: element,\n      className: `square-cell ${borderClasses}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: `square-input ${inPlay}`,\n      type: \"text\",\n      value: cellValue,\n      maxLength: \"1\",\n      onClick: e => dispatch(setActiveCells(rowIndex, colIndex)),\n      onChange: e => {\n        if (checkValid(e, rowIndex, colIndex)) {\n          const value = parseInt(e.target.value);\n          console.log(value);\n          dispatch(setCellValue(rowIndex, colIndex, value));\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    cellValues: state.cellValues,\n    solvedCellValues: state.solvedCellValues,\n    activeCells: state.activeCells\n  };\n};\n\nexport default connect(mapStateToProps)(BoardRow);","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/BoardRow.js"],"names":["React","connect","setActiveCells","setCellValue","BoardRow","props","cellValues","solvedCellValues","rowIndex","activeCells","dispatch","columns","getValue","row","column","isInPlay","isSameAsActive","checkValid","e","colIndex","length","alert","value","parseInt","target","isNaN","isLeftColBorder","col","isRightColBorder","isTopRowBorder","isBottomRowBorder","map","element","cellValue","inPlay","borderClasses","console","log","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\"\nimport { setActiveCells, setCellValue } from \"../redux/actions\"\nimport \"../styles/BoardRow.css\";\n\n//cellValues, activeCells, solvedCellValues, rowIndex, handleChange, setActiveCells\n\nconst BoardRow = props => {\n  const { cellValues, solvedCellValues, rowIndex, activeCells, dispatch } = props;\n  const columns = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const getValue = (row, column) => {\n    return cellValues[row][column];\n  };\n  const isInPlay = (activeCells, row, column) => {\n    const isSameAsActive = (row === activeCells[0] && column === activeCells[1]) ? true : false\n    if (row === activeCells[0] && !isSameAsActive) return true\n    if (column === activeCells[1] && !isSameAsActive) return true\n    return false\n  }\n  const checkValid = (e, rowIndex, colIndex) => {\n    if (\n      cellValues.length === 0 ||\n      solvedCellValues.length === 0\n    ) {\n      alert(\"Please start the game\")\n      return false\n    }\n    const value = parseInt(e.target.value);\n    if (isNaN(value)) {\n      alert(\"You must enter a valid whole number between 0 and 9\");\n      return false\n    }\n    if (solvedCellValues[rowIndex][colIndex] !== value) {\n      alert(\"incorrect input\")\n      return false\n    }\n    return true\n  }\n\n  // Setting border classnames \n  // columns\n  const isLeftColBorder = (col) => {\n    if (col === 0) {\n      return true\n    }\n    return false\n  }\n  const isRightColBorder = (col) => {\n    if (col === 2 || col === 5 || col === 8) {\n      return true\n    }\n    return false\n  }\n  // rows\n  const isTopRowBorder = (row) => {\n    if (row === 0) {\n      return true\n    }\n    return false\n  }\n  const isBottomRowBorder = (row) => {\n    if (row === 2 || row === 5 || row === 8) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <tr>\n      {columns.map(element => {\n        const colIndex = element - 1;\n        var cellValue = getValue(rowIndex, colIndex);\n        if (cellValue === 0) {\n          cellValue = ''\n        }\n        const inPlay = isInPlay(activeCells, rowIndex, colIndex) ? 'inPlay' : ''\n        let borderClasses = ''\n        if (isLeftColBorder(colIndex)) {\n          borderClasses += 'grid-border-left '\n        }\n        if (isRightColBorder(colIndex)) {\n          borderClasses += 'grid-border-right '\n        }\n        if (isTopRowBorder(rowIndex)) {\n          borderClasses += 'grid-border-top '\n        }\n        if (isBottomRowBorder(rowIndex)) {\n          borderClasses += 'grid-border-bottom'\n        }\n        return (\n          <td key={element} className={`square-cell ${borderClasses}`}>\n            <input\n              className={`square-input ${inPlay}`}\n              type=\"text\"\n              value={cellValue}\n              maxLength='1'\n              onClick={e => dispatch(setActiveCells(rowIndex, colIndex))}\n              onChange={e => {\n                if (checkValid(e, rowIndex, colIndex)) {\n                  const value = parseInt(e.target.value)\n                  console.log(value)\n                  dispatch(setCellValue(rowIndex, colIndex, value))\n                }\n              }}\n            />\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cellValues: state.cellValues,\n    solvedCellValues: state.solvedCellValues,\n    activeCells: state.activeCells\n  }\n}\n\nexport default connect(mapStateToProps)(BoardRow)\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
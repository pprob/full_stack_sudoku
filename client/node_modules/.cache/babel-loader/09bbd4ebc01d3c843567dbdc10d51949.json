{"ast":null,"code":"var _jsxFileName = \"/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js\";\nimport React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport InfoBox from \"./InfoBox\";\nimport createFullGrid from \"../utils/createFullGrid/createFullGrid\";\nimport copyGrid from \"../utils/copyGrid/copyGrid\";\nimport removeNumbers from \"../utils/removeNumbers/removeNumbers\";\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      console.log(\"solve\");\n    };\n\n    this.stop = () => {\n      console.log(\"stop\");\n    };\n\n    this.newGame = () => {\n      this.createNewGame();\n    };\n\n    this.deleteGame = () => {\n      console.log(\"delete game\");\n    };\n\n    this.goBack = () => {\n      console.log(\"go back\");\n    };\n\n    this.setActiveCells = (row, col) => {\n      const activeCells = [];\n      activeCells.push(row, col);\n      this.setState(state => {\n        return {\n          activeCells\n        };\n      });\n    };\n\n    this.handleChange = (e, rowIndex, colIndex) => {\n      const solvedGrid = this.state.solvedCellValues;\n\n      if (this.state.cellValues.length === 0 || this.state.solvedCellValues.length === 0) {\n        alert(\"Please start the game\");\n        return this.state;\n      }\n\n      const value = parseInt(e.target.value);\n\n      if (isNaN(value)) {\n        alert(\"You must enter a valid whole number between 0 and 9\");\n        return this.state;\n      }\n\n      if (solvedGrid[rowIndex][colIndex] !== value) {\n        alert('incorrect');\n        return this.state;\n      }\n\n      this.setState(prevState => {\n        const currentGrid = prevState.cellValues;\n        currentGrid[rowIndex][colIndex] = value;\n        return {\n          cellValues: currentGrid\n        };\n      });\n      return this.state;\n    };\n\n    this.createNewGame = difficulty => {\n      const solvedGrid = createFullGrid();\n      const solvedGridCopy = copyGrid(solvedGrid);\n      const challengeGrid = removeNumbers(solvedGridCopy, difficulty);\n      this.setState(state => {\n        return {\n          cellValues: challengeGrid,\n          solvedCellValues: solvedGrid\n        };\n      });\n    };\n\n    this.state = {\n      cellValues: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],\n      solvedCellValues: [],\n      activeCells: [],\n      difficulty: 5\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n\n  componentDidUpdate() {}\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Banner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"app-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Tools, {\n      solve: this.solve,\n      stop: this.stop,\n      newGame: this.newGame,\n      deleteGame: this.deleteGame,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Board, {\n      cellValues: this.state.cellValues,\n      activeCells: this.state.activeCells,\n      handleChange: this.handleChange,\n      setActiveCells: this.setActiveCells,\n      solvedCellValues: this.state.solvedCellValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InfoBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a8106360/Documents/Self learning/Sudoku/my-app/src/components/App.js"],"names":["React","Banner","Tools","Board","Footer","InfoBox","createFullGrid","copyGrid","removeNumbers","App","Component","constructor","props","solve","console","log","stop","newGame","createNewGame","deleteGame","goBack","setActiveCells","row","col","activeCells","push","setState","state","handleChange","e","rowIndex","colIndex","solvedGrid","solvedCellValues","cellValues","length","alert","value","parseInt","target","isNaN","prevState","currentGrid","difficulty","solvedGridCopy","challengeGrid","bind","componentDidUpdate","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Banner from \"./Banner\";\nimport Tools from \"./Tools\";\nimport Board from \"./Board\";\nimport Footer from \"./Footer\";\nimport InfoBox from \"./InfoBox\";\n\nimport createFullGrid from \"../utils/createFullGrid/createFullGrid\";\nimport copyGrid from \"../utils/copyGrid/copyGrid\";\nimport removeNumbers from \"../utils/removeNumbers/removeNumbers\";\n\nimport \"../styles/App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cellValues: [\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      ],\n      solvedCellValues: [],\n      activeCells: [],\n      difficulty: 5,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n  solve = () => {\n    console.log(\"solve\");\n  };\n  stop = () => {\n    console.log(\"stop\");\n  };\n  newGame = () => {\n    this.createNewGame();\n  };\n  deleteGame = () => {\n    console.log(\"delete game\");\n  };\n  goBack = () => {\n    console.log(\"go back\");\n  };\n  setActiveCells = (row, col) => {\n    const activeCells = [];\n    activeCells.push(row, col);\n    this.setState((state) => {\n      return {\n        activeCells,\n      };\n    });\n  };\n  handleChange = (e, rowIndex, colIndex) => {\n    const solvedGrid = this.state.solvedCellValues\n    if (\n      this.state.cellValues.length === 0 ||\n      this.state.solvedCellValues.length === 0\n    ) {\n      alert(\"Please start the game\");\n      return this.state;\n    }\n    const value = parseInt(e.target.value);\n    if (isNaN(value)) {\n      alert(\"You must enter a valid whole number between 0 and 9\");\n      return this.state;\n    }\n    if (solvedGrid[rowIndex][colIndex] !== value) {\n      alert('incorrect')\n      return this.state\n    }\n      this.setState((prevState) => {\n        const currentGrid = prevState.cellValues;\n        currentGrid[rowIndex][colIndex] = value;\n        return {\n          cellValues: currentGrid,\n        };\n      });\n    \n    return this.state;\n  };\n  componentDidUpdate() {}\n  createNewGame = (difficulty) => {\n    const solvedGrid = createFullGrid();\n    const solvedGridCopy = copyGrid(solvedGrid);\n    const challengeGrid = removeNumbers(solvedGridCopy, difficulty);\n\n    this.setState((state) => {\n      return {\n        cellValues: challengeGrid,\n        solvedCellValues: solvedGrid,\n      };\n    });\n  };\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <div className='app'>\n        <Banner />\n        <section className='app-body'>\n          <Tools\n            solve={this.solve}\n            stop={this.stop}\n            newGame={this.newGame}\n            deleteGame={this.deleteGame}\n            goBack={this.goBack}\n          />\n          <Board\n            cellValues={this.state.cellValues}\n            activeCells={this.state.activeCells}\n            handleChange={this.handleChange}\n            setActiveCells={this.setActiveCells}\n            solvedCellValues={this.state.solvedCellValues}\n          />\n          <InfoBox />\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}